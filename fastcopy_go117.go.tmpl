// +build go1.17

// CODE GENERATED AUTOMATICALLY WITH github.com/probably-not/fastcopy/cmd/gen.go

package {{ .T }}

// `isOptimized` is a constant used to ensure that the build constraint works appropriately.
// It's not that I don't trust the build constraint... but... I don't trust them...
const isOptimized = true

func Copy{{ .T | Title }}Slice(dst, src []{{ .T }}) {
	// If len(dst) is less than len(src), then we need to copy with the size equal to len(dst)
	// in order to not panic by getting an array that is bigger than len(dst)
	if len(dst) < len(src) {
		switch len(dst) {
		{{ range $val := Iterate .MaxL }}
		case {{ $val }}:
			copy{{ $.T | Title }}Slice{{ $val }}(dst, src)
			return
		{{ end }}
		default:
			// If len(dst) is greater than the maximum that we have generated for, then we utilize the built-in copy function.
			copy(dst, src)
			return
		}
	}

	// If len(src) is within our limits and greater than len(dst), then we need to copy with the
	// size equal to len(src) in order to not panic by getting an array that is bigger than len(src)
	switch len(src) {
	{{ range $val := Iterate .MaxL }}
	case {{ $val }}:
		copy{{ $.T | Title }}Slice{{ $val }}(dst, src)
		return
	{{ end }}
	default:
		// If len(dst) is greater than the maximum that we have generated for, then we utilize the built-in copy function.
		copy(dst, src)
		return
	}
}
{{ with .CopyFuncGenerators }}{{ range . }}
func copy{{ .T | Title }}Slice{{ .N }}(dst, src []{{ .T }}) {
	*(*[{{ .N }}]{{ .T }})(dst) = *(*[{{ .N }}]{{ .T }})(src)
}
{{ end }}{{ end }}